---
import ImagePB from "./ImagePB.astro";
import { allFilmSorted } from "../../backend/backend.mjs";
const Film = await allFilmSorted();
---

<div id="carousel-film" class="relative overflow-hidden w-full rounded-lg">
    <!-- Film Slides -->
    <div class="relative h-auto bg-sky-950/10">
        {
            Film &&
                Film.map((film, index) => (
                    <div
                        data-slide={index}
                        class={`carousel-slide relatve top-0 left-0 w-full h-full ${index === 0 ? "active" : "hidden"}`}
                    >
                        <div class="relative flex flex-col md:flex-row h-full">
                            <div class="md:w-1/3 h-full bg-sky-950 flex items-center justify-center">
                                <ImagePB
                                    record={film}
                                    field="affiche_film"
                                    alt={`Affiche du film ${film.titre_film}`}
                                    classPicture="h-full w-full"
                                    classImg="object-cover object-center h-full w-full"
                                    thumb="0x400"
                                />
                            </div>
                            <div class="md:w-2/3 p-6 bg-sky-950 text-white flex flex-col justify-between">
                                <div>
                                    <h3 class="text-2xl font-bold text-orange-400 mb-2">
                                        {film.titre_film}
                                    </h3>
                                    <div class="relative flex flex-wrap gap-4 text-sm mb-4">
                                        {film.realisateur_film && (
                                            <span>
                                                Réalisateur:{" "}
                                                {film.realisateur_film}
                                            </span>
                                        )}
                                        {film.projection_film && (
                                            <span>
                                                Projection:{" "}
                                                {new Date(
                                                    film.projection_film,
                                                ).toLocaleDateString()}
                                            </span>
                                        )}
                                        {(film.expand?.lieu?.name ||
                                            film.lieu) && (
                                            <span>
                                                Lieu:{" "}
                                                {film.expand?.lieu?.name ||
                                                    film.lieu}
                                            </span>
                                        )}
                                    </div>
                                    {film.synopsis_film && (
                                        <div class="prose prose-sm prose-invert line-clamp-3 md:line-clamp-6">
                                            <span
                                                set:html={film.synopsis_film}
                                            />
                                        </div>
                                    )}
                                </div>
                                <div class="mt-4">
                                    <a
                                        href={`/programmation/${film.id}`}
                                        class="inline-block bg-orange-400 text-sky-950 font-medium py-2 px-4 rounded-lg hover:bg-orange-500 transition-colors"
                                    >
                                        Voir détails
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                ))
        }
    </div>

    <!-- Navigation Arrows -->
    <button
        id="prev-slide"
        class="absolute left-2 top-1/2 -translate-y-1/2 bg-sky-950/70 hover:bg-sky-950 text-white rounded-full p-2 z-10 transition-colors"
        aria-label="Précédent"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M15.75 19.5L8.25 12l7.5-7.5"></path>
        </svg>
    </button>

    <button
        id="next-slide"
        class="absolute right-2 top-1/2 -translate-y-1/2 bg-sky-950/70 hover:bg-sky-950 text-white rounded-full p-2 z-10 transition-colors"
        aria-label="Suivant"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
        </svg>
    </button>

    <!-- Indicators -->
    <div
        class="relative bottom-4 bg-sky-950 left-1/2 -translate-x-1/2 flex justify-center space-x-2 z-10 py-3 pb-6 rounded-b-xl"
        id="carousel-indicators"
    >
        {
            Film &&
                Film.map((_, index) => (
                    <button
                        data-slide-to={index}
                        class={`carousel-indicator w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? "bg-orange-400 scale-125" : "bg-white/50 hover:bg-white"}`}
                        aria-label={`Aller au film ${index + 1}`}
                    />
                ))
        }
    </div>
</div>

<style>
    .carousel-slide {
        opacity: 0;
        transform: translateX(100%);
        transition:
            opacity 0.5s ease,
            transform 0.5s ease;
    }

    .carousel-slide.active {
        opacity: 1;
        transform: translateX(0);
        display: block;
    }

    .carousel-slide.previous {
        opacity: 0;
        transform: translateX(-100%);
    }
</style>

<script>
    // Initialize carousel functionality
    document.addEventListener("DOMContentLoaded", () => {
        // Elements
        const carousel = document.getElementById("carousel-film");
        const slides = carousel.querySelectorAll(".carousel-slide");
        const prevButton = document.getElementById("prev-slide");
        const nextButton = document.getElementById("next-slide");
        const indicators = carousel.querySelectorAll(".carousel-indicator");

        let currentSlide = 0;
        let autoplayInterval = null;
        const totalSlides = slides.length;

        // Function to show specific slide
        const showSlide = (index) => {
            // Remove active class from all slides
            slides.forEach((slide) => {
                slide.classList.remove("active", "previous");
                slide.classList.add("hidden");
            });

            // Add active class to current slide
            slides[index].classList.add("active");
            slides[index].classList.remove("hidden");

            // Update indicators
            indicators.forEach((indicator, i) => {
                if (i === index) {
                    indicator.classList.add("bg-orange-400", "scale-125");
                    indicator.classList.remove("bg-white/50");
                } else {
                    indicator.classList.remove("bg-orange-400", "scale-125");
                    indicator.classList.add("bg-white/50");
                }
            });

            currentSlide = index;
        };

        // Next slide function
        const nextSlide = () => {
            const next = (currentSlide + 1) % totalSlides;

            // Add previous class to current slide
            slides[currentSlide].classList.add("previous");

            // Show next slide
            showSlide(next);
        };

        // Previous slide function
        const prevSlide = () => {
            const prev = (currentSlide - 1 + totalSlides) % totalSlides;
            showSlide(prev);
        };

        // Start autoplay
        const startAutoplay = () => {
            if (autoplayInterval) clearInterval(autoplayInterval);
            autoplayInterval = setInterval(nextSlide, 5000);
        };

        // Stop autoplay
        const stopAutoplay = () => {
            if (autoplayInterval) {
                clearInterval(autoplayInterval);
                autoplayInterval = null;
            }
        };

        // Event listeners
        prevButton.addEventListener("click", () => {
            prevSlide();
            stopAutoplay();
        });

        nextButton.addEventListener("click", () => {
            nextSlide();
            stopAutoplay();
        });

        // Set up indicator clicks
        indicators.forEach((indicator, index) => {
            indicator.addEventListener("click", () => {
                showSlide(index);
                stopAutoplay();
            });
        });

        // Mouse hover effects
        carousel.addEventListener("mouseenter", stopAutoplay);
        carousel.addEventListener("mouseleave", startAutoplay);

        // Initialize autoplay
        startAutoplay();
    });
</script>
